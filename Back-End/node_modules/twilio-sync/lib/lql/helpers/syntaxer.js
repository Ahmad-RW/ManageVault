"use strict";
function getLowPriorityBlock(tree, priority) {
    let lexemes = require('../config/lexemes');
    if (priority === undefined) {
        priority = -1;
    }
    if (!tree.lexeme || lexemes[tree.lexeme.type].priority < priority || tree.right === null) {
        if (tree.left && Object.keys(tree.left).length == 0) {
            return tree.left;
        }
        return tree;
    }
    return getLowPriorityBlock(tree.right, priority);
}
function genericFieldSyntaxer(type) {
    return function (options, lexemesArray, i, tree) {
        let lexemes = require('../config/lexemes');
        let block = getLowPriorityBlock(tree, lexemes.string.priority);
        let tempLexeme = {
            type: type,
            value: lexemesArray[i].value,
        };
        block.lexeme = tempLexeme;
        block.left = null;
        block.right = null;
        return i + 1;
    };
}
function generateBasicSyntaxer(type) {
    return function basicSyntaxer(options, lexemesArray, i, tree) {
        let lexemes = require('../config/lexemes');
        let block = getLowPriorityBlock(tree, lexemes[type].priority);
        if (!block.lexeme) {
            throw new Error('Nothing before ' + type + ' block');
        }
        let tempLexeme = {
            type: block.lexeme.type,
            value: block.lexeme.value
        };
        block.lexeme = {
            type: type
        };
        block.left = {
            lexeme: tempLexeme,
            left: block.left,
            right: block.right
        };
        block.right = {};
        if (!block.left.lexeme.value) {
            delete block.left.lexeme.value;
        }
        return i + 1;
    };
}
function notSyntaxer(options, lexemesArray, i, tree) {
    let lexemes = require('../config/lexemes');
    let block = getLowPriorityBlock(tree, lexemes['not'].priority);
    block.lexeme = {
        type: 'not'
    };
    block.left = {};
    block.right = null;
    return i + 1;
}
function genericBlockSyntaxer(typeStart, typeEnd) {
    return function basicSyntaxer(options, lexemesArray, i, tree, createTree) {
        let lexemes = require('../config/lexemes');
        let block = getLowPriorityBlock(tree, eval('lexemes.' + typeStart + '.priority'));
        let tempLexeme = {
            type: typeStart
        };
        let newBlock = createTree(typeEnd, i + 1);
        block.lexeme = tempLexeme;
        block.left = newBlock;
        block.right = null;
    };
}
module.exports = {
    andSyntaxer: generateBasicSyntaxer('and'),
    orSyntaxer: generateBasicSyntaxer('or'),
    eqSyntaxer: generateBasicSyntaxer('eq'),
    notEqualSyntaxer: generateBasicSyntaxer('not_eq'),
    commaSyntaxer: generateBasicSyntaxer('comma'),
    inSyntaxer: generateBasicSyntaxer('in'),
    notInSyntaxer: generateBasicSyntaxer('not_in'),
    containsSyntaxer: generateBasicSyntaxer('contains'),
    blockSyntaxer: genericBlockSyntaxer('startBlock', 'endBlock'),
    arraySyntaxer: genericBlockSyntaxer('startArray', 'endArray'),
    stringSyntaxer: genericFieldSyntaxer('string'),
    attrSyntaxer: genericFieldSyntaxer('attr'),
    notSyntaxer
};
