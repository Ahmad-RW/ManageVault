declare const andLexeme: {
    regexp: string;
    escaped: boolean;
    modifiers: string;
    lexer: any;
    syntaxer: any;
    priority: number;
    checker: {
        negative: string[];
    };
};
declare const andAmpersandLexeme: {
    regexp: string;
    escaped: boolean;
    modifiers: string;
    lexer: any;
    syntaxer: any;
    priority: number;
    checker: {
        negative: string[];
    };
};
declare const orLexeme: {
    regexp: string;
    escaped: boolean;
    modifiers: string;
    lexer: any;
    syntaxer: any;
    priority: number;
    checker: {
        negative: string[];
    };
};
declare const orVerticalBarLexeme: {
    regexp: string;
    escaped: boolean;
    modifiers: string;
    lexer: any;
    syntaxer: any;
    priority: number;
    checker: {
        negative: string[];
    };
};
declare const equalLexeme: {
    regexp: string;
    escaped: boolean;
    modifiers: string;
    lexer: any;
    syntaxer: any;
    priority: number;
    checker: {
        mandatory: string[];
    };
};
declare const equalDoubleSignLexeme: {
    regexp: string;
    escaped: boolean;
    modifiers: string;
    lexer: any;
    syntaxer: any;
    priority: number;
    checker: {
        mandatory: string[];
    };
};
declare const notEqualLexeme: {
    regexp: string;
    escaped: boolean;
    modifiers: string;
    lexer: any;
    syntaxer: any;
    priority: number;
    checker: {
        mandatory: string[];
    };
};
declare const notEqualExclamationLexeme: {
    regexp: string;
    escaped: boolean;
    modifiers: string;
    lexer: any;
    syntaxer: any;
    priority: number;
    checker: {
        mandatory: string[];
    };
};
declare const containsLexeme: {
    regexp: string;
    escaped: boolean;
    modifiers: string;
    lexer: any;
    syntaxer: any;
    priority: number;
    checker: {
        mandatory: string[];
    };
};
declare const notLexeme: {
    regexp: string;
    escaped: boolean;
    modifiers: string;
    lexer: any;
    syntaxer: any;
    priority: number;
    checker: {
        mandatory: string[];
    };
};
declare const commaLexeme: {
    regexp: string;
    escaped: boolean;
    lexer: any;
    syntaxer: any;
    priority: number;
    postFunction: any;
    checker: {
        mandatory: string[];
    };
};
declare const inLexeme: {
    regexp: string;
    escaped: boolean;
    modifiers: string;
    lexer: any;
    syntaxer: any;
    priority: number;
    checker: {
        mandatory: string[];
    };
};
declare const notInLexeme: {
    regexp: string;
    escaped: boolean;
    modifiers: string;
    lexer: any;
    syntaxer: any;
    priority: number;
    checker: {
        mandatory: string[];
    };
};
declare const startBlockLexeme: {
    regexp: string;
    escaped: boolean;
    lexer: any;
    syntaxer: any;
    priority: number;
    postFunction: any;
    checker: {
        negative: string[];
    };
};
declare const endBlockLexeme: {
    regexp: string;
    escaped: boolean;
    lexer: any;
    checker: {
        negative: string[];
    };
};
declare const startArrayLexeme: {
    regexp: string;
    escaped: boolean;
    lexer: any;
    syntaxer: any;
    priority: number;
    postFunction: any;
    checker: {
        mandatory: string[];
    };
};
declare const endArrayLexeme: {
    regexp: string;
    escaped: boolean;
    lexer: any;
};
declare const stringLexeme: {
    regexp: string;
    lexer: any;
    syntaxer: any;
    checker: {
        negative: string[];
    };
    priority: number;
};
declare const attrLexeme: {
    regexp: string;
    lexer: any;
    syntaxer: any;
    checker: {
        negative: string[];
    };
    priority: number;
};
export { andLexeme as and, andAmpersandLexeme as andAmpersand, orLexeme as or, orVerticalBarLexeme as orVerticalBar, equalLexeme as eq, equalDoubleSignLexeme as eqDoubleSign, notEqualLexeme as not_eq, notEqualExclamationLexeme as notEqExclamation, containsLexeme as contains, inLexeme as in, notInLexeme as not_in, notLexeme as not, commaLexeme as comma, startBlockLexeme as startBlock, endBlockLexeme as endBlock, startArrayLexeme as startArray, endArrayLexeme as endArray, stringLexeme as string, attrLexeme as attr, };
