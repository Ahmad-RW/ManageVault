/// <reference types="node" />
import { AuthenticateOptions, AuthenticatePayload, AuthenticationResponse, BaseClient, Instance, TokenWithExpiry } from "@pusher/platform-node";
export interface AuthenticationOptions {
    userId: string;
    authPayload?: AuthenticatePayload;
}
export interface UserIdOptions {
    userId: string;
}
export interface GetRoomOptions {
    roomId: string;
}
export interface SendMessageOptions extends UserIdOptions {
    roomId: string;
    text: string;
    attachment?: AttachmentOptions;
}
export interface SendMultipartMessageOptions {
    roomId: string;
    userId: string;
    parts: Array<NewPart>;
}
export declare type NewPart = NewInlinePart | NewURLPart | NewAttachmentPart;
export interface NewInlinePart {
    type: string;
    content: string;
}
export interface NewURLPart {
    type: string;
    url: string;
}
export interface NewAttachmentPart {
    type: string;
    file: Buffer;
    name?: string;
    customData?: any;
}
export interface AttachmentOptions {
    resourceLink: string;
    type: string;
}
export interface DeleteMessageOptions {
    id: string;
}
export interface DeleteUserOptions extends UserIdOptions {
}
export interface GetUserRoomOptions extends UserIdOptions {
}
export interface GetUserJoinableRoomOptions extends UserIdOptions {
}
export interface GetUserRolesOptions extends UserIdOptions {
}
export interface RemoveGlobalRoleForUserOptions extends UserIdOptions {
}
export interface GetRoomsOptions {
    fromId?: string;
    includePrivate?: boolean;
}
export interface GetUserOptions {
    id: string;
}
export interface GetUsersOptions {
    fromTimestamp?: string;
    limit?: number;
}
export interface RemoveRoomRoleForUserOptions extends UserIdOptions {
    roomId: string;
}
export interface BasicAssignRoleToUserOptions {
    userId: string;
    name: string;
}
export interface AssignGlobalRoleToUserOptions extends BasicAssignRoleToUserOptions {
}
export interface AssignRoleToUserOptions extends BasicAssignRoleToUserOptions {
    roomId?: string;
}
export interface AssignRoomRoleToUserOptions extends BasicAssignRoleToUserOptions {
    roomId: string;
}
export interface DeleteRoleOptions {
    name: string;
}
export interface CreateRoleOptions {
    name: string;
    permissions: Array<string>;
}
export interface CreateScopedRoleOptions extends CreateRoleOptions {
    scope: string;
}
export interface UpdatePermissionsOptions {
    name: string;
    permissionsToAdd?: Array<string>;
    permissionsToRemove?: Array<string>;
}
export interface GetPermissionsOptions {
    name: string;
}
export interface TokenWithExpiryAt {
    token: string;
    expiresAt: number;
}
export interface Options {
    instanceLocator: string;
    key: string;
    port?: number;
    host?: string;
    client?: BaseClient;
}
export interface GeneralRequestOptions {
    method: string;
    path: string;
    jwt?: string;
    qs?: object;
}
export interface SetReadCursorOptions {
    userId: string;
    roomId: string;
    position: number;
}
export interface GetReadCursorOptions {
    userId: string;
    roomId: string;
}
export interface GetReadCursorsForUserOptions {
    userId: string;
}
export interface GetReadCursorsForRoomOptions {
    roomId: string;
}
export declare type GetRoomMessagesOptions = FetchMultipartMessagesOptions;
export interface FetchMultipartMessagesOptions {
    direction?: string;
    initialId?: string;
    limit?: number;
    roomId: string;
}
export interface CreateUserOptions {
    id: string;
    name: string;
    avatarURL?: string;
    customData?: any;
}
export interface UpdateUserOptions {
    id: string;
    name?: string;
    avatarURL?: string;
    customData?: any;
}
export interface CreateRoomOptions {
    creatorId: string;
    name: string;
    isPrivate?: boolean;
    userIds?: Array<string>;
    customData?: object;
}
export interface UpdateRoomOptions {
    id: string;
    name?: string;
    isPrivate?: boolean;
    customData?: object;
}
export interface DeleteRoomOptions {
    id: string;
}
export interface AddUsersToRoomOptions {
    roomId: string;
    userIds: Array<string>;
}
export interface RemoveUsersFromRoomOptions {
    roomId: string;
    userIds: Array<string>;
}
export interface UpdateRolePermissionsOptions {
    add_permissions?: Array<string>;
    remove_permissions?: Array<string>;
}
export interface CreateUsersOptions {
    users: Array<User>;
}
export interface GetUsersByIdOptions {
    userIds: Array<string>;
}
export interface User {
    id: string;
    name: string;
    avatarURL?: string;
    customData?: any;
}
export default class Chatkit {
    serverInstanceV2: Instance;
    serverInstanceV3: Instance;
    authorizerInstance: Instance;
    cursorsInstance: Instance;
    instanceLocator: string;
    private tokenWithExpiry?;
    constructor(options: Options);
    authenticate(options: AuthenticationOptions): AuthenticationResponse;
    generateAccessToken(options: AuthenticateOptions): TokenWithExpiry;
    createUser(options: CreateUserOptions): Promise<any>;
    createUsers(options: CreateUsersOptions): Promise<any>;
    updateUser(options: UpdateUserOptions): Promise<any>;
    deleteUser(options: DeleteUserOptions): Promise<void>;
    getUser(options: GetUserOptions): Promise<any>;
    getUsers(options?: GetUsersOptions): Promise<any>;
    getUsersById(options: GetUsersByIdOptions): Promise<any>;
    getRoom(options: GetRoomOptions): Promise<any>;
    sendMessage(options: SendMessageOptions): Promise<any>;
    sendSimpleMessage(options: SendMessageOptions): Promise<any>;
    sendMultipartMessage(options: SendMultipartMessageOptions): Promise<any>;
    private uploadAttachment;
    deleteMessage(options: DeleteMessageOptions): Promise<void>;
    getRoomMessages(options: GetRoomMessagesOptions): Promise<any>;
    fetchMultipartMessages(options: FetchMultipartMessagesOptions): Promise<any>;
    private fetchMessages;
    getRooms(options?: GetRoomsOptions): Promise<any>;
    getUserRooms(options: GetUserRoomOptions): Promise<any>;
    getUserJoinableRooms(options: GetUserJoinableRoomOptions): Promise<any>;
    createRoom(options: CreateRoomOptions): Promise<any>;
    updateRoom(options: UpdateRoomOptions): Promise<void>;
    deleteRoom(options: DeleteRoomOptions): Promise<void>;
    addUsersToRoom(options: AddUsersToRoomOptions): Promise<void>;
    removeUsersFromRoom(options: RemoveUsersFromRoomOptions): Promise<void>;
    createRoomRole(options: CreateRoleOptions): Promise<void>;
    createGlobalRole(options: CreateRoleOptions): Promise<void>;
    private createRole;
    deleteGlobalRole(options: DeleteRoleOptions): Promise<void>;
    deleteRoomRole(options: DeleteRoleOptions): Promise<void>;
    assignGlobalRoleToUser(options: AssignGlobalRoleToUserOptions): Promise<void>;
    assignRoomRoleToUser(options: AssignRoomRoleToUserOptions): Promise<void>;
    private assignRoleToUser;
    getUserRoles(options: GetUserRolesOptions): Promise<any>;
    removeGlobalRoleForUser(options: RemoveGlobalRoleForUserOptions): Promise<void>;
    removeRoomRoleForUser(options: RemoveRoomRoleForUserOptions): Promise<void>;
    getPermissionsForGlobalRole(options: GetPermissionsOptions): Promise<any>;
    getPermissionsForRoomRole(options: GetPermissionsOptions): Promise<any>;
    updatePermissionsForGlobalRole(options: UpdatePermissionsOptions): Promise<any>;
    updatePermissionsForRoomRole(options: UpdatePermissionsOptions): Promise<any>;
    getRoles(): Promise<any>;
    setReadCursor(options: SetReadCursorOptions): Promise<void>;
    getReadCursor(options: GetReadCursorOptions): Promise<any>;
    getReadCursorsForUser(options: GetReadCursorsForUserOptions): Promise<any>;
    getReadCursorsForRoom(options: GetReadCursorsForRoomOptions): Promise<any>;
    apiRequest(options: GeneralRequestOptions): Promise<any>;
    authorizerRequest(options: GeneralRequestOptions): Promise<any>;
    cursorsRequest(options: GeneralRequestOptions): Promise<any>;
    private updatePermissionsForRole;
    /**
     * This method manages the token for http library and pusher platform
     * communication
     */
    private getServerToken;
}
