"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./util/index");
const restpaginator_1 = require("./restpaginator");
const synclistdescriptor_1 = require("./synclistdescriptor");
/**
 * Provides async pagination interface for sync list
 *
 * @property {Network} network Network transport
 * @property {string} syncListUrl Url to the sync list endpoint
 */
class SyncList {
    /**
     * @param {SyncListServices} services - services needed for SyncList service
     * @private
     */
    constructor(services) {
        this.services = services;
    }
    getPage(args) {
        return __awaiter(this, void 0, void 0, function* () {
            args = args || {};
            let links = yield this.services.session.getSessionLinks();
            const url = new index_1.UriBuilder(links.syncListUrl).arg('PageToken', args.pageToken).build();
            let response = yield this.services.network.get(url);
            return new restpaginator_1.RestPaginator(response.body.channels.map(x => new synclistdescriptor_1.SyncListDescriptor(x)), pageToken => this.getPage({ pageToken }), response.body.meta.previous_token, response.body.meta.next_token);
        });
    }
}
exports.SyncList = SyncList;
