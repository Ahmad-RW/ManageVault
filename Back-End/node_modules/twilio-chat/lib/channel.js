"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const logger_1 = require("./logger");
const members_1 = require("./data/members");
const member_1 = require("./member");
const messages_1 = require("./data/messages");
const util_1 = require("./util");
const log = logger_1.Logger.scope('Channel');
const fieldMappings = {
    lastMessage: 'lastMessage',
    attributes: 'attributes',
    createdBy: 'createdBy',
    dateCreated: 'dateCreated',
    dateUpdated: 'dateUpdated',
    friendlyName: 'friendlyName',
    lastConsumedMessageIndex: 'lastConsumedMessageIndex',
    name: 'friendlyName',
    notificationLevel: 'notificationLevel',
    sid: 'sid',
    status: 'status',
    type: 'type',
    uniqueName: 'uniqueName'
};
function parseTime(timeString) {
    try {
        return new Date(timeString);
    }
    catch (e) {
        return null;
    }
}
function filterStatus(status) {
    switch (status) {
        case 'notParticipating':
            return 'known';
        default:
            return status;
    }
}
exports.filterStatus = filterStatus;
/**
 * @classdesc A Channel represents a remote channel of communication between multiple Programmable Chat Clients
 * @property {Object} attributes - The Channel's custom attributes
 * @property {String} createdBy - The identity of the User that created this Channel
 * @property {Date} dateCreated - The Date this Channel was created
 * @property {Date} dateUpdated - The Date this Channel was last updated
 * @property {String} friendlyName - The Channel's name
 * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)
 * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in this Channel
 * @property {Channel#LastMessage} lastMessage - Last Message sent to this Channel
 * @property {Channel#NotificationLevel} notificationLevel - User Notification level for this Channel
 * @property {String} sid - The Channel's unique system identifier
 * @property {Channel#Status} status - The Channel's status
 * @property {Channel#Type} type - The Channel's type
 * @property {String} uniqueName - The Channel's unique name (tag)
 * @fires Channel#memberJoined
 * @fires Channel#memberLeft
 * @fires Channel#memberUpdated
 * @fires Channel#messageAdded
 * @fires Channel#messageRemoved
 * @fires Channel#messageUpdated
 * @fires Channel#typingEnded
 * @fires Channel#typingStarted
 * @fires Channel#updated
 */
class Channel extends events_1.EventEmitter {
    /**
     * These options can be passed to {@link Channel#sendMessage}.
     * @typedef {Object} Channel#SendMediaOptions
     * @property {String} contentType - content type of media
     * @property {String | Buffer} media - content to post
     */
    /**
     * The update reason for <code>updated</code> event emitted on Channel
     * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |
      'friendlyName' | 'lastConsumedMessageIndex' | 'status' | 'uniqueName' | 'lastMessage' |
      'notificationLevel' )} Channel#UpdateReason
     */
    /**
     * The status of the Channel, relative to the Client: whether the Channel
     * is <code>known</code> to local Client, Client is <code>invited</code> to or
     * is <code>joined</code> to this Channel
     * @typedef {('unknown' | 'known' | 'invited' | 'joined')} Channel#Status
     */
    /**
     * The type of Channel (<code>public</code> or <code>private</code>).
     * @typedef {('public' | 'private')} Channel#Type
     */
    /**
     * The User's Notification level for Channel, determines whether the currently logged-in User will receive
     * pushes for events in this Channel. Can be either <code>muted</code> or <code>default</code>,
     * where <code>default</code> defers to global Service push configuration.
     * @typedef {('default' | 'muted')} Channel#NotificationLevel
     */
    constructor(services, descriptor, sid) {
        super();
        let attributes = descriptor.attributes || {};
        let createdBy = descriptor.createdBy;
        let dateCreated = parseTime(descriptor.dateCreated);
        let dateUpdated = parseTime(descriptor.dateUpdated);
        let friendlyName = descriptor.name || descriptor.friendlyName || null;
        let lastConsumedMessageIndex = Number.isInteger(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;
        let uniqueName = descriptor.uniqueName || null;
        try {
            JSON.stringify(attributes);
        }
        catch (e) {
            throw new Error('Attributes must be a valid JSON object.');
        }
        this.services = services;
        this.sid = sid;
        this.entityName = descriptor.channel;
        this.state = {
            uniqueName,
            status: 'known',
            type: descriptor.type,
            attributes,
            createdBy,
            dateCreated,
            dateUpdated,
            friendlyName,
            lastConsumedMessageIndex
        };
        if (descriptor.notificationLevel) {
            this.state.notificationLevel = descriptor.notificationLevel;
        }
        this.members = new Map();
        this.membersEntity = new members_1.Members(this, this.services, this.members);
        this.membersEntity.on('memberJoined', this.emit.bind(this, 'memberJoined'));
        this.membersEntity.on('memberLeft', this.emit.bind(this, 'memberLeft'));
        this.membersEntity.on('memberUpdated', (args) => this.emit('memberUpdated', args));
        this.messagesEntity = new messages_1.Messages(this, services);
        this.messagesEntity.on('messageAdded', message => this._onMessageAdded(message));
        this.messagesEntity.on('messageUpdated', (args) => this.emit('messageUpdated', args));
        this.messagesEntity.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));
    }
    get status() { return this.state.status; }
    get type() { return this.state.type; }
    get uniqueName() { return this.state.uniqueName; }
    get isPrivate() { return this.state.type === 'private'; }
    get friendlyName() { return this.state.friendlyName; }
    get dateUpdated() { return this.state.dateUpdated; }
    get dateCreated() { return this.state.dateCreated; }
    get createdBy() { return this.state.createdBy; }
    get attributes() { return this.state.attributes; }
    get lastConsumedMessageIndex() { return this.state.lastConsumedMessageIndex; }
    get lastMessage() { return this.state.lastMessage; }
    get notificationLevel() { return this.state.notificationLevel; }
    /**
     * The Channel's last message's information.
     * @typedef {Object} Channel#LastMessage
     * @property {Number} index - Message's index
     * @property {Date} timestamp - Message's creation timestamp
     */
    /**
     * Load and Subscribe to this Channel and do not subscribe to its Members and Messages.
     * This or _subscribeStreams will need to be called before any events on Channel will fire.
     * @returns {Promise}
     * @private
     */
    _subscribe() {
        if (this.entityPromise) {
            return this.entityPromise;
        }
        return this.entityPromise = this.entityPromise ||
            this.services.syncClient.document({ id: this.entityName, mode: 'open_existing' })
                .then(entity => {
                this.entity = entity;
                this.entity.on('updated', args => { this._update(args.value); });
                this.entity.on('removed', () => this.emit('removed', this));
                this._update(this.entity.value);
                return entity;
            })
                .catch(err => {
                this.entity = null;
                this.entityPromise = null;
                if (this.services.syncClient.connectionState != 'disconnected') {
                    log.error('Failed to get channel object', err);
                }
                log.debug('ERROR: Failed to get channel object', err);
                throw err;
            });
    }
    /**
     * Load the attributes of this Channel and instantiate its Members and Messages.
     * This or _subscribe will need to be called before any events on Channel will fire.
     * This will need to be called before any events on Members or Messages will fire
     * @returns {Promise}
     * @private
     */
    _subscribeStreams() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this._subscribe();
                log.trace('_subscribeStreams, this.entity.value=', this.entity.value);
                const messagesObjectName = this.entity.value.messages;
                const rosterObjectName = this.entity.value.roster;
                yield Promise.all([
                    this.messagesEntity.subscribe(messagesObjectName),
                    this.membersEntity.subscribe(rosterObjectName)
                ]);
            }
            catch (err) {
                if (this.services.syncClient.connectionState !== 'disconnected') {
                    log.error('Failed to subscribe on channel objects', this.sid, err);
                }
                log.debug('ERROR: Failed to subscribe on channel objects', this.sid, err);
                throw err;
            }
        });
    }
    /**
     * Stop listening for and firing events on this Channel.
     * @returns {Promise}
     * @private
     */
    _unsubscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            // Keep our subscription to public channels objects
            if (this.isPrivate && this.entity) {
                yield this.entity.close();
                this.entity = null;
                this.entityPromise = null;
            }
            return Promise.all([
                this.membersEntity.unsubscribe(),
                this.messagesEntity.unsubscribe()
            ]);
        });
    }
    /**
     * Set channel status
     * @private
     */
    _setStatus(status, source) {
        this.statusSource = source;
        if (this.state.status === status) {
            return;
        }
        this.state.status = status;
        if (status === 'joined') {
            this._subscribeStreams()
                .catch(err => {
                log.debug('ERROR while setting channel status ' + status, err);
                if (this.services.syncClient.connectionState !== 'disconnected') {
                    throw err;
                }
            });
        }
        else if (status === 'invited') {
            this._subscribe()
                .catch(err => {
                log.debug('ERROR while setting channel status ' + status, err);
                if (this.services.syncClient.connectionState !== 'disconnected') {
                    throw err;
                }
            });
        }
        else if (this.entityPromise) {
            this._unsubscribe().catch(err => {
                log.debug('ERROR while setting channel status ' + status, err);
                if (this.services.syncClient.connectionState !== 'disconnected') {
                    throw err;
                }
            });
        }
    }
    /**
     * If channel's status update source
     * @private
     * @return {Channels.DataSource}
     */
    _statusSource() {
        return this.statusSource;
    }
    static preprocessUpdate(update, channelSid) {
        try {
            if (typeof update.attributes === 'string') {
                update.attributes = JSON.parse(update.attributes);
            }
            else if (update.attributes) {
                JSON.stringify(update.attributes);
            }
        }
        catch (e) {
            log.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);
            update.attributes = {};
        }
        try {
            if (update.dateCreated) {
                update.dateCreated = new Date(update.dateCreated);
            }
        }
        catch (e) {
            log.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);
            delete update.dateCreated;
        }
        try {
            if (update.dateUpdated) {
                update.dateUpdated = new Date(update.dateUpdated);
            }
        }
        catch (e) {
            log.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);
            delete update.dateUpdated;
        }
        try {
            if (update.lastMessage && update.lastMessage.timestamp) {
                update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);
            }
        }
        catch (e) {
            log.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);
            delete update.lastMessage.timestamp;
        }
    }
    /**
     * Updates local channel object with new values
     * @private
     */
    _update(update) {
        log.trace('_update', update);
        let updateReasons = [];
        Channel.preprocessUpdate(update, this.sid);
        for (let key in update) {
            let localKey = fieldMappings[key];
            if (!localKey) {
                continue;
            }
            if (localKey === fieldMappings.status) {
                if (update.status && update.status != 'unknown' &&
                    this.state.status !== filterStatus(update.status)) {
                    this.state.status = filterStatus(update.status);
                    updateReasons.push(localKey);
                }
            }
            else if (localKey === fieldMappings.attributes) {
                if (!util_1.isDeepEqual(this.state.attributes, update.attributes)) {
                    this.state.attributes = update.attributes;
                    updateReasons.push(localKey);
                }
            }
            else if (localKey === fieldMappings.lastConsumedMessageIndex) {
                if (!(typeof update.lastConsumedMessageIndex === 'undefined') &&
                    update.lastConsumedMessageIndex !== this.state.lastConsumedMessageIndex) {
                    this.state.lastConsumedMessageIndex = update.lastConsumedMessageIndex;
                    updateReasons.push(localKey);
                }
            }
            else if (localKey === fieldMappings.lastMessage) {
                let updated = false;
                if (this.state.lastMessage && !update.lastMessage) {
                    delete this.state.lastMessage;
                    updated = true;
                }
                else {
                    if (!this.state.lastMessage) {
                        this.state.lastMessage = {};
                    }
                    if (update.lastMessage && (typeof update.lastMessage.index !== 'undefined') &&
                        update.lastMessage.index !== this.state.lastMessage.index) {
                        this.state.lastMessage.index = update.lastMessage.index;
                        updated = true;
                    }
                    if (update.lastMessage && update.lastMessage.timestamp &&
                        (!this.state.lastMessage.timestamp || this.state.lastMessage.timestamp.getTime() !== update.lastMessage.timestamp.getTime())) {
                        this.state.lastMessage.timestamp = update.lastMessage.timestamp;
                        updated = true;
                    }
                    if (util_1.isDeepEqual(this.state.lastMessage, {})) {
                        delete this.state.lastMessage;
                    }
                }
                if (updated) {
                    updateReasons.push(localKey);
                }
            }
            else if (update[key] instanceof Date) {
                if (!this.state[localKey] || this.state[localKey].getTime() !== update[key].getTime()) {
                    this.state[localKey] = update[key];
                    updateReasons.push(localKey);
                }
            }
            else if (this[localKey] !== update[key]) {
                this.state[localKey] = update[key];
                updateReasons.push(localKey);
            }
        }
        if (updateReasons.length > 0) {
            this.emit('updated', { channel: this, updateReasons: updateReasons });
        }
    }
    /**
     * @private
     */
    _onMessageAdded(message) {
        for (let member of this.members.values()) {
            if (member.identity === message.author) {
                member._endTyping();
                break;
            }
        }
        this.emit('messageAdded', message);
    }
    /**
     * Add a participant to the Channel by its Identity.
     * @param {String} identity - Identity of the Client to add
     * @returns {Promise<void|Error|SessionError>}
     */
    add(identity) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!identity || typeof identity !== 'string') {
                throw new Error('Channel.add requires an <String>identity parameter');
            }
            return this.membersEntity.add(identity);
        });
    }
    /**
     * Advance last consumed Channel's Message index to current consumption horizon.
     * Rejects if User is not Member of Channel.
     * Last consumed Message index is updated only if new index value is higher than previous.
     * @param {Number} index - Message index to advance to as last read
     * @returns {Promise<number|Error|SessionError>} resulting unread messages count in the channel
     */
    advanceLastConsumedMessageIndex(index) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Number.isInteger(index)) {
                throw new Error('Channel.advanceLastConsumedMessageIndex requires an integral <Number>index parameter');
            }
            yield this._subscribeStreams();
            return this.services.consumptionHorizon.advanceLastConsumedMessageIndexForChannel(this.sid, index, this.lastConsumedMessageIndex);
        });
    }
    /**
     * Decline an invitation to the Channel and unsubscribe from its events.
     * @returns {Promise<Channel|SessionError>}
     */
    decline() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.services.session.addCommand('declineInvitation', {
                channelSid: this.sid
            });
            return this;
        });
    }
    /**
     * Delete the Channel and unsubscribe from its events.
     * @returns {Promise<Channel|SessionError>}
     */
    delete() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.services.session.addCommand('destroyChannel', {
                channelSid: this.sid
            });
            return this;
        });
    }
    /**
     * Get the custom attributes of this Channel.<br/>
     *
     * <i>NOTE: {@link Channel}'s <code>attributes</code> property will be empty for public channels until this function is called.</i>
     * @returns {Promise<Object>}
     */
    getAttributes() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._subscribe();
            return this.attributes;
        });
    }
    /**
     * Returns messages from channel using paginator interface.
     * @param {Number} [pageSize=30] Number of messages to return in single chunk
     * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default
     * @param {String} [direction=backwards] - Query direction. By default it query backwards
     *                                         from newer to older. 'forward' will query in opposite direction
     * @returns {Promise<Paginator<Message>>} page of messages
     */
    getMessages(pageSize, anchor, direction) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof anchor !== 'undefined' && !Number.isInteger(anchor)) {
                throw new Error('Anchor should be a valid message index');
            }
            yield this._subscribeStreams();
            return this.messagesEntity.getMessages(pageSize, anchor, direction);
        });
    }
    /**
     * Get a list of all Members joined to this Channel.
     * @returns {Promise<Array<Member>>}
     */
    getMembers() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._subscribeStreams();
            return this.membersEntity.getMembers();
        });
    }
    /**
     * Get channel members count.
     * @returns {Promise<number|Error>}
     */
    getMembersCount() {
        return __awaiter(this, void 0, void 0, function* () {
            let links = yield this.services.session.getSessionLinks();
            let url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();
            let response = yield this.services.network.get(url);
            return response.body.members_count;
        });
    }
    /**
     * Get total message count in a channel.
     * @returns {Promise<number|Error>}
     */
    getMessagesCount() {
        return __awaiter(this, void 0, void 0, function* () {
            let links = yield this.services.session.getSessionLinks();
            let url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();
            let response = yield this.services.network.get(url);
            return response.body.messages_count;
        });
    }
    /**
     * Get unconsumed messages count for User if he is Member of this Channel.
     * Rejects if User is not Member of Channel.
     * @returns {Promise<number|Error>}
     */
    getUnconsumedMessagesCount() {
        return __awaiter(this, void 0, void 0, function* () {
            let links = yield this.services.session.getSessionLinks();
            let url = new util_1.UriBuilder(links.myChannelsUrl).arg('ChannelSid', this.sid).build();
            let response = yield this.services.network.get(url);
            if (response.body.channels.length && response.body.channels[0].channel_sid == this.sid) {
                if ((typeof response.body.channels[0].unread_messages_count !== 'undefined') && response.body.channels[0].unread_messages_count != null) {
                    return response.body.channels[0].unread_messages_count;
                }
                return null;
            }
            throw new Error('Channel is not in user channels list');
        });
    }
    /**
     * Invite a user to the Channel by their Identity.
     * @param {String} identity - Identity of the user to invite
     * @returns {Promise<void|Error|SessionError>}
     */
    invite(identity) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof identity !== 'string' || !identity.length) {
                throw new Error('Channel.invite requires an <String>identity parameter');
            }
            return this.membersEntity.invite(identity);
        });
    }
    /**
     * Join the Channel and subscribe to its events.
     * @returns {Promise<Channel|SessionError>}
     */
    join() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.services.session.addCommand('joinChannelV2', { channelSid: this.sid });
            return this;
        });
    }
    /**
     * Leave the Channel.
     * @returns {Promise<Channel|SessionError>}
     */
    leave() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state.status === 'joined') {
                yield this.services.session.addCommand('leaveChannel', { channelSid: this.sid });
            }
            return this;
        });
    }
    /**
     * Remove a Member from the Channel.
     * @param {String} member - identity of member to remove
     * @returns {Promise<void|Error|SessionError>}
     */
    removeMember(member) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!member || (typeof member !== 'string' && !(member instanceof member_1.Member))) {
                throw new Error('Channel.removeMember requires a <String|Member>member parameter.');
            }
            return this.membersEntity.remove(typeof member === 'string' ? member : member.identity);
        });
    }
    /**
     * Send a Message in the Channel.
     * @param {String | FormData | Channel#SendMediaOptions} message - The message body for text message,
     * FormData or MediaOptions for media content
     * @param {Object} messageAttributes - attributes for the message
     * @returns {Promise<number|Error|SessionError>} new Message's index in the Channel's messages list
     */
    sendMessage(message, messageAttributes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof message === 'undefined') {
                throw new Error('Message is required parameter');
            }
            if (typeof message === 'string' || message === null) {
                let response = yield this.messagesEntity.send(message, messageAttributes);
                return util_1.parseToNumber(response.messageId);
            }
            else {
                let response = yield this.messagesEntity.sendMedia(message, messageAttributes);
                return util_1.parseToNumber(response.messageId);
            }
        });
    }
    /**
     * Set last consumed Channel's Message index to last known Message's index in this Channel.
     * @returns {Promise<number|SessionError>} resulting unread messages count in the channel
     */
    setAllMessagesConsumed() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._subscribeStreams();
            let messagesPage = yield this.getMessages(1);
            if (messagesPage.items.length > 0) {
                return this.advanceLastConsumedMessageIndex(messagesPage.items[0].index);
            }
            return Promise.resolve(0);
        });
    }
    /**
     * Set all messages in the channel unread.
     * @returns {Promise<number|SessionError>} resulting unread messages count in the channel
     */
    setNoMessagesConsumed() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._subscribeStreams();
            return this.services.consumptionHorizon.updateLastConsumedMessageIndexForChannel(this.sid, null);
        });
    }
    /**
     * Set User Notification level for this channel.
     * @param {Channel#NotificationLevel} notificationLevel - The new user notification level
     * @returns {Promise<void|Error|SessionError>}
     */
    setUserNotificationLevel(notificationLevel) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!notificationLevel) {
                throw new Error('notificationLevel can\'t be null');
            }
            yield this.services.session.addCommand('editNotificationLevel', { channelSid: this.sid, notificationLevel: notificationLevel });
        });
    }
    /**
     * Send a notification to the server indicating that this Client is currently typing in this Channel.
     * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.
     * @returns {Promise<void|SessionError>}
     */
    typing() {
        return this.services.typingIndicator.send(this.sid);
    }
    /**
     * Update the Channel's attributes.
     * @param {Object} attributes - The new attributes object
     * @returns {Promise<Channel|Error|SessionError>}
     */
    updateAttributes(attributes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof attributes === 'undefined') {
                throw new Error('Attributes is required parameter');
            }
            else if (attributes === null) {
                throw new Error('Attributes can\'t be null');
            }
            else if (attributes.constructor !== Object) {
                throw new Error('Attributes must be a valid JSON object.');
            }
            yield this.services.session.addCommand('editAttributes', {
                channelSid: this.sid,
                attributes: JSON.stringify(attributes)
            });
            return this;
        });
    }
    /**
     * Update the Channel's friendlyName.
     * @param {String} name - The new Channel friendlyName
     * @returns {Promise<Channel|SessionError>}
     */
    updateFriendlyName(name) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state.friendlyName !== name) {
                yield this.services.session.addCommand('editFriendlyName', {
                    channelSid: this.sid,
                    friendlyName: name
                });
            }
            return this;
        });
    }
    /**
     * Set last consumed Channel's Message index to current consumption horizon.
     * @param {Number|null} index - Message index to set as last read.
     * If null provided, then the behavior is identical to {@link Channel#setNoMessagesConsumed}
     * @returns {Promise<number|Error|SessionError>} resulting unread messages count in the channel
     */
    updateLastConsumedMessageIndex(index) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(Number.isInteger(index) || index === null)) {
                throw new Error('Incorrect argument "index": integer number or null expected');
            }
            yield this._subscribeStreams();
            return this.services.consumptionHorizon.updateLastConsumedMessageIndexForChannel(this.sid, index);
        });
    }
    /**
     * Update the Channel's unique name.
     * @param {String} uniqueName - The new Channel uniqueName
     * @returns {Promise<Channel|SessionError>}
     */
    updateUniqueName(uniqueName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.state.uniqueName !== uniqueName) {
                if (!uniqueName) {
                    uniqueName = '';
                }
                yield this.services.session.addCommand('editUniqueName', {
                    channelSid: this.sid,
                    uniqueName: uniqueName
                });
            }
            return this;
        });
    }
    /**
     * Gets User Descriptors for this channel.
     * @returns {Promise<Paginator<UserDescriptor>>}
     */
    getUserDescriptors() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.services.users.getChannelUserDescriptors(this.sid);
        });
    }
}
exports.Channel = Channel;
/**
 * Fired when a Member has joined the Channel.
 * @event Channel#memberJoined
 * @type {Member}
 */
/**
 * Fired when a Member has left the Channel.
 * @event Channel#memberLeft
 * @type {Member}
 */
/**
 * Fired when a Member's fields has been updated.
 * @event Channel#memberUpdated
 * @type {Object}
 * @property {Member} member - Updated Member
 * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons
 */
/**
 * Fired when a new Message has been added to the Channel.
 * @event Channel#messageAdded
 * @type {Message}
 */
/**
 * Fired when Message is removed from Channel's message list.
 * @event Channel#messageRemoved
 * @type {Message}
 */
/**
 * Fired when an existing Message's fields are updated with new values.
 * @event Channel#messageUpdated
 * @type {Object}
 * @property {Message} message - Updated Message
 * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons
 */
/**
 * Fired when a Member has stopped typing.
 * @event Channel#typingEnded
 * @type {Member}
 */
/**
 * Fired when a Member has started typing.
 * @event Channel#typingStarted
 * @type {Member}
 */
/**
 * Fired when a Channel's attributes or metadata have been updated.
 * During Channel's {@link Client.create | creation and initialization} this event might be fired multiple times
 * for same joined or created Channel as new data is arriving from different sources.
 * @event Channel#updated
 * @type {Object}
 * @property {Channel} channel - Updated Channel
 * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons
 */
