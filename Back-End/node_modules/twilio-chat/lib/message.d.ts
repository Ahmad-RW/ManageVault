/// <reference types="node" />
import { EventEmitter } from 'events';
import { Channel } from './channel';
import { Session } from './session';
import { McsClient } from 'twilio-mcs-client';
import { Media } from './media';
declare namespace Message {
    type Type = 'text' | 'media';
}
export interface MessageServices {
    session: Session;
    mcsClient: McsClient;
}
declare namespace Message {
    type UpdateReason = 'body' | 'lastUpdatedBy' | 'dateUpdated' | 'timestamp' | 'attributes' | 'author';
    interface UpdatedEventArgs {
        message: Message;
        updateReasons: Message.UpdateReason[];
    }
}
/**
 * @classdesc A Message represents a Message in a Channel.
 * @property {String} author - The name of the user that sent Message
 * @property {String} body - The body of the Message. Is null if Message is Media Message
 * @property {Object} attributes - Message custom attributes
 * @property {Channel} channel - Channel Message belongs to
 * @property {Date} dateUpdated - When Message was updated
 * @property {Number} index - Index of Message in the Channel's messages list
 * @property {String} lastUpdatedBy - Identity of the last user that updated Message
 * @property {Media} media - Contains Media information (if present)
 * @property {String} sid - The server-assigned unique identifier for Message
 * @property {Date} timestamp - When Message was created
 * @property {'text' | 'media' } type - Type of message: 'text' or 'media'
 * @fires Message#updated
 */
declare class Message extends EventEmitter {
    readonly channel: Channel;
    private services;
    private state;
    /**
     * The update reason for <code>updated</code> event emitted on Message
     * @typedef {('body' | 'lastUpdatedBy' | 'dateUpdated' | 'timestamp' | 'attributes' | 'author')} Message#UpdateReason
     */
    constructor(channel: Channel, services: MessageServices, index: number, data: any);
    readonly sid: string;
    readonly author: string;
    readonly body: string;
    readonly dateUpdated: Date;
    readonly index: number;
    readonly lastUpdatedBy: string;
    readonly timestamp: Date;
    readonly attributes: Object;
    readonly type: Message.Type;
    readonly media: Media;
    _update(data: any): void;
    /**
     * Remove the Message.
     * @returns {Promise<Message|SessionError>}
     */
    remove(): Promise<this>;
    /**
     * Edit message body.
     * @param {String} body - new body of Message.
     * @returns {Promise<Message|Error|SessionError>}
     */
    updateBody(body: string): Promise<Message>;
    /**
     * Edit message attributes.
     * @param {Object} attributes new attributes for Message.
     * @returns {Promise<Message|Error|SessionError>}
     */
    updateAttributes(attributes: Object): Promise<this>;
}
export { Message };
/**
 * Fired when the Message's properties or body has been updated.
 * @event Message#updated
 * @type {Object}
 * @property {Message} message - Updated Message
 * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons
 */
