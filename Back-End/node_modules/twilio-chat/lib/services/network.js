"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const operation_retrier_1 = require("operation-retrier");
class Network {
    constructor(config, services) {
        this.config = config;
        this.services = services;
        this.cache = new Map();
        this.cacheLifetime = 0;
        this.services.session.getHttpCacheInterval().then(seconds => {
            this.cacheLifetime = seconds * 1000;
            this.cleanupCache();
        });
    }
    backoffConfig() {
        return Object.assign(this.config.backoffConfigDefault, this.config.backoffConfigOverride);
    }
    retryWhenThrottled() {
        if (typeof this.config.retryWhenThrottledOverride !== 'undefined') {
            return this.config.retryWhenThrottledOverride;
        }
        if (typeof this.config.retryWhenThrottledDefault !== 'undefined') {
            return this.config.retryWhenThrottledDefault;
        }
        return false;
    }
    isExpired(timestamp) {
        return !this.cacheLifetime || (Date.now() - timestamp) > this.cacheLifetime;
    }
    cleanupCache() {
        for (let [k, v] of this.cache) {
            if (this.isExpired(v.timestamp)) {
                this.cache.delete(k);
            }
        }
        if (this.cache.size === 0) {
            clearInterval(this.timer);
        }
    }
    pokeTimer() {
        this.timer = this.timer || setInterval(() => this.cleanupCache(), this.cacheLifetime * 2);
    }
    executeWithRetry(request, retryWhenThrottled = false) {
        return new Promise((resolve, reject) => {
            let codesToRetryOn = [502, 503, 504];
            if (retryWhenThrottled) {
                codesToRetryOn.push(429);
            }
            let retrier = new operation_retrier_1.default(this.backoffConfig());
            retrier.on('attempt', () => {
                request()
                    .then(result => retrier.succeeded(result))
                    .catch(err => {
                    if (codesToRetryOn.indexOf(err.status) > -1) {
                        retrier.failed(err);
                    }
                    else if (err.message === 'Twilsock disconnected') {
                        // Ugly hack. We must make a proper exceptions for twilsock
                        retrier.failed(err);
                    }
                    else {
                        // Fatal error
                        retrier.removeAllListeners();
                        retrier.cancel();
                        reject(err);
                    }
                });
            });
            retrier.on('succeeded', result => { resolve(result); });
            retrier.on('cancelled', err => reject(err));
            retrier.on('failed', err => reject(err));
            retrier.start();
        });
    }
    get(url) {
        return __awaiter(this, void 0, void 0, function* () {
            let cacheEntry = this.cache.get(url);
            if (cacheEntry && !this.isExpired(cacheEntry.timestamp)) {
                return cacheEntry.response;
            }
            const headers = {};
            let response = yield this.executeWithRetry(() => this.services.transport.get(url, headers), this.retryWhenThrottled());
            this.cache.set(url, { response, timestamp: Date.now() });
            this.pokeTimer();
            return response;
        });
    }
}
exports.Network = Network;
