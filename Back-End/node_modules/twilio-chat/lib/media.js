"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @classdesc A Media represents a media information for Message in a Channel.
 * @property {String} contentType - content type of media
 * @property {String} sid - The server-assigned unique identifier for Media
 * @property {Number} size - Size of media, bytes
 * @property {String} [filename] - file name if present, null otherwise
 */
class Media {
    constructor(data, services) {
        this.mcsMedia = null;
        this.services = services;
        this.state = {
            sid: data.sid,
            filename: data.filename,
            contentType: data.contentType,
            size: data.size
        };
    }
    get sid() { return this.state.sid; }
    get filename() { return this.state.filename; }
    get contentType() { return this.state.contentType; }
    get size() { return this.state.size; }
    /**
     * Returns direct content URL for the media.
     * @returns {Promise<String>}
     */
    getContentUrl() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.mcsMedia) {
                if (this.services.mcsClient) {
                    this.mcsMedia = yield this.services.mcsClient.get(this.state.sid);
                }
                else {
                    throw new Error('Media Content Service is unavailable');
                }
            }
            return this.mcsMedia.getContentUrl();
        });
    }
}
exports.Media = Media;
