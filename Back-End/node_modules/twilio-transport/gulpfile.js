const gulp = require('gulp');
const istanbul = require('gulp-istanbul');
const mocha = require('gulp-mocha');
const runSequence = require('run-sequence');
const tslint = require('gulp-tslint');
const typescript = require('gulp-typescript');
const pkg = require('./package');

const product = {
  source: {
    dir: 'src',
    name: pkg.name + '.js',
    lib: 'lib/*.js'
  },
  packaged: {
    dir: 'dist',
    name: pkg.name + '.js',
    minified: pkg.name + '.min.js'
  },
  bundled: {
    dir: 'src',
    name: pkg.name + '-bundle.js'
  },
  license: 'LICENSE'
};

const tests = {
  lint: {
    files: [
      'src/*.js',
      'gulpfile.js'
    ]
  },
  unit: {
    index: 'test/unit/index.js'
  },
  integration: {
    index: 'test/integration/index.ts'
  }
};

const coverage = {
  dir: product.packaged.dir + '/coverage'
};

gulp.task('default', function() {
  return runSequence(
    'clean',
    'lint',
    //'unit-test',
    'integration-test',
    'build-node'
  );
});

gulp.task('build-node', function() {
  const project = typescript.createProject('tsconfig.json');
  return project.src()
    .pipe(project())
    .once("error", function () {
      this.once("finish", () => process.exit(1));
    })
    .pipe(gulp.dest('lib'));
});

gulp.task('jsdoc', function(done) {
  runSequence('generate-jsdoc', 'prettify-jsdoc', done);
});

gulp.task('clean', function() {
});

gulp.task('lint', function() {
  return gulp.src(tests.lint.files)
    .pipe(tslint({
      formatter: 'prose'
    }))
    .pipe(tslint.report({
      allowWarnings: false,
      emitError: true,
      summarizeFailureOutput: true
    }));
});

gulp.task('istanbul-setup', function() {
  return gulp.src([product.source.lib])
    .pipe(istanbul())
    .pipe(istanbul.hookRequire());
});

gulp.task('unit-test', ['istanbul-setup'], function() {
  return gulp.src(tests.unit.index, { read: false })
    .pipe(mocha({ reporter: 'spec' }))
    .pipe(istanbul.writeReports({
      dir: coverage.dir,
      reporters: ['cobertura', 'lcov', 'text'],
      reportOpts: { dir: coverage.dir }
    }));
});

gulp.task('integration-test', function() {
  return gulp.src(tests.integration.index, { read: false })
    .pipe(mocha({
      require: 'ts-node/register',
      reporter: 'spec',
      exit: true,
      timeout: 5000,
      suppress: true
    }));
});

