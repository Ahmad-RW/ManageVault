/// <reference types="node" />
import { EventEmitter } from 'events';
import { Protocol } from './protocol/protocol';
import { Result } from './services/upstream';
import { OfflineProductStorage } from './offlinestorage';
declare type Context = Protocol.Context;
/**
 * @alias Twilsock
 * @classdesc Client library for the Twilsock service
 * It allows to recevie service-generated updates as well as bi-directional transport
 */
declare class TwilsockClient extends EventEmitter {
    private readonly config;
    private readonly channel;
    private readonly registrations;
    private readonly upstream;
    private offlineStorageDeferred;
    /**
     * @param {string} Token Twilio access token
     * @param {string} ProductId Product identifier. Should be the same as a grant name in token
     */
    constructor(token: string, productId: string, options?: any);
    private handleStorageId;
    storageId(): Promise<OfflineProductStorage>;
    /**
     * Indicates if twilsock is connected now
     */
    readonly isConnected: boolean;
    readonly state: string;
    /**
     * Update token
     * @param {String} token
     */
    updateToken(token: string): Promise<void>;
    /**
     * Updates notification context.
     * This method shouldn't be used anyone except twilio notifications library
     * @param contextId id of notification context
     * @param context value of notification context
     * @private
     */
    setNotificationsContext(contextId: string, context: Context): void;
    /**
     * Remove notification context.
     * This method shouldn't be used anyone except twilio notifications library
     * @param contextId id of notification context
     * @private
     */
    removeNotificationsContext(contextId: string): void;
    /**
     * Connect to the server
     * @fires TwilsockClient#connected
     * @public
     */
    connect(): void;
    /**
     * Disconnect from the server
     * @fires TwilsockClient#disconnected
     * @public
     */
    disconnect(): Promise<void>;
    /**
     * Get HTTP request to upstream service
     * @param {string} url Upstream service url
     * @param {headers} headers Set of custom headers
     */
    get(url: string, headers: any): Promise<Result>;
    /**
     * Post HTTP request to upstream service
     * @param {string} url Upstream service url
     * @param {headers} headers Set of custom headers
     * @param {body} body Body to send
     */
    post(url: string, headers: any, body: any): Promise<Result>;
    /**
     * Put HTTP request to upstream service
     * @param {string} url Upstream service url
     * @param {headers} headers Set of custom headers
     * @param {body} body Body to send
     */
    put(url: string, headers: any, body: any): Promise<Result>;
    /**
     * Delete HTTP request to upstream service
     * @param {string} url Upstream service url
     * @param {headers} headers Set of custom headers
     */
    delete(url: string, headers: any): Promise<Result>;
}
/**
 * Twilsock destination address descriptor
 * @typedef {Object} Twilsock#Address
 * @property {String} method - HTTP method. (POST, PUT, etc)
 * @property {String} host - host name without path. (e.g. my.company.com)
 * @property {String} path - path on the host (e.g. /my/app/to/call.php)
 */
/**
 * Twilsock upstream message
 * @typedef {Object} Twilsock#Message
 * @property {Twilsock#Address} to - destination address
 * @property {Object} headers - HTTP headers
 * @property {Object} body - Body
 */
/**
 * Fired when new message received
 * @param {Object} message
 * @event TwilsockClient#message
 */
/**
 * Fired when socket connected
 * @param {String} URI of endpoint
 * @event TwilsockClient#connected
 */
/**
 * Fired when socket disconnected
 * @event TwilsockClient#disconnected
 */
/**
 * Fired when token is about to expire and should be updated
 * @event TwilsockClient#tokenAboutToExpire
 */
/**
* Fired when socket connected
* @param {String} state - general twilsock state [ connecting | connected | rejected | disconnecting | disconnected ]
* @event TwilsockClient#stateChanged
*/
export { Context, Result, TwilsockClient, TwilsockClient as Twilsock };
